[package]
authors = ["Serde YML Contributors"]
categories = ["encoding", "parser-implementations"]
description = """
A robust Rust library that simplifies the serialization and deserialization of Rust data structures to and from YAML format using the widely-used Serde framework.
"""
documentation = "https://docs.rs/serde_yml/"
edition = "2021"
exclude = ["/.git/*", "/.github/*", "/.gitignore", "/.vscode/*"]
homepage = "https://serdeyml.com"
keywords = ["yaml", "serde", "serialization"]
license = "MIT OR Apache-2.0"
name = "serde_yml"
readme = "README.md"
repository = "https://github.com/sebastienrousseau/serde_yml"
rust-version = "1.56.0"
version = "0.0.12"
include = [
    "/CONTRIBUTING.md",
    "/LICENSE-APACHE",
    "/LICENSE-MIT",
    "/benches/**",
    "/build.rs",
    "/Cargo.toml",
    "/examples/**",
    "/README.md",
    "/src/**",
    "/tests/**",
]

# [[bench]]
# name = "benchmark"
# harness = false
# path = "benches/criterion.rs"

# [profile.bench]
# debug = true


[dependencies]
indexmap = "2.2.4"
itoa = "1.0"
libyml = "0.0.5"
memchr = { version = "2", default-features = false }
ryu = "1.0"
serde = { version = "1.0.204" }

[build-dependencies]
# Dependencies for build scripts.
version_check = "0.9.4" # Check the Rust version used to compile the package.

[dev-dependencies]
indoc = "2.0.5"
serde = { version = "1.0.204", features = ["derive"] }
serde_derive = "1.0.204"

[features]
default = []

[lib]
crate-type = ["lib"]
doc-scrape-examples = false
name = "serde_yml"
path = "src/lib.rs"
required-features = []

[package.metadata.docs.rs]
# Specify arguments for rustdoc to enhance documentation quality.
rustdoc-args = [
    "--generate-link-to-definition",
    "--cfg", "docsrs",
    "--document-private-items",
    "--display-warnings"
]
# Build docs with all crate features enabled to cover the entire API.
all-features = true
# Target platform for the docs, ensuring compatibility with common Linux servers.
targets = ["x86_64-unknown-linux-gnu"]

# Linting config
[lints.rust]

## Warn
# box_pointers = "warn"
missing_copy_implementations = "warn"
missing_docs = "warn"
unstable_features = "warn"
# unused_crate_dependencies = "warn"
unused_extern_crates = "warn"
# unused_results = "warn"

## Allow
bare_trait_objects = "allow"
elided_lifetimes_in_paths = "allow"
non_camel_case_types = "allow"
non_upper_case_globals = "allow"
trivial_bounds = "allow"
unsafe_code = "allow"

## Forbid
# missing_docs = "warn"
missing_debug_implementations = "forbid"
non_ascii_idents = "forbid"
unreachable_pub = "forbid"

## Deny
dead_code = "deny"
deprecated_in_future = "deny"
ellipsis_inclusive_range_patterns = "deny"
explicit_outlives_requirements = "deny"
future_incompatible = { level = "deny", priority = -1 }
keyword_idents = { level = "deny", priority = -1 }
macro_use_extern_crate = "deny"
meta_variable_misuse = "deny"
missing_fragment_specifier = "deny"
noop_method_call = "deny"
rust_2018_idioms = { level = "deny", priority = -1 }
rust_2021_compatibility = { level = "deny", priority = -1 }
single_use_lifetimes = "deny"
trivial_casts = "deny"
trivial_numeric_casts = "deny"
unused = { level = "deny", priority = -1 }
unused_features = "deny"
unused_import_braces = "deny"
unused_labels = "deny"
unused_lifetimes = "deny"
unused_macro_rules = "deny"
unused_qualifications = "deny"
variant_size_differences = "deny"


[package.metadata.clippy]
warn-lints = [
    "clippy::all",
    "clippy::pedantic",
    "clippy::cargo",
    "clippy::nursery",
]

[profile.dev]
codegen-units = 256
debug = true
debug-assertions = true
incremental = true
lto = false
opt-level = 0
overflow-checks = true
panic = 'unwind'
rpath = false
strip = false

[profile.release]
codegen-units = 1
debug = false
debug-assertions = false
incremental = false
lto = true
opt-level = "s"
overflow-checks = false
panic = "abort"
rpath = false
strip = "symbols"

[profile.test]
codegen-units = 256
debug = true
debug-assertions = true
incremental = true
lto = false
opt-level = 0
overflow-checks = true
rpath = false
strip = false
